[
  {
    "namespace": "SL3U",
    "functions": [
      {
        "name": "setLogConsoleLevel",
        "type": "function",
        "async": true,
        "parameters": [
          {
            "name": "level",
            "type": "string",
            "description": "Logging level"
          }
        ]
      },
      {
        "name": "expandRecipients",
        "type": "function",
        "async": true,
        "description": "Expand mailing lists into individual recipients.",
        "parameters": [
          {
            "name": "tabId",
            "type": "integer"
          },
          {
            "name": "field",
            "type": "string"
          }
        ]
      },
      {
        "name": "signingOrEncryptingMessage",
        "type": "function",
        "async": true,
        "description": "Indicates whether the draft in the specified tab has signing or encryption enabled",
        "parameters": [
          {
            "name": "tabId",
            "type": "integer"
          }
        ]
      },
      {
        "name": "GenericPreSendCheck",
        "type": "function",
        "async": true,
        "description": "Check if message is ready to be sent, and alert other extensions.",
        "parameters": []
      },
      {
        "name": "setDispositionState",
        "type": "function",
        "async": true,
        "description": "Set message disposition",
        "parameters": [
          {
            "name": "messageId",
            "type": "integer",
            "description": "ID of message to modify."
          },
          {
            "name": "disposition",
            "type": "string",
            "description": "Disposition to set ('replied' or 'forwarded')"
          }
        ]
      },
      {
        "name": "sendRaw",
        "type": "function",
        "async": true,
        "description": "Sends email from raw message content",
        "parameters": [
          {
            "name": "content",
            "type": "string",
            "description": "Contents of message to send"
          },
          {
            "name": "sendUnsentMsgs",
            "type": "boolean",
            "description": "Whether to trigger send operation on outbox messages."
          }
        ]
      },
      {
        "name": "saveMessage",
        "type": "function",
        "async": true,
        "description": "Replace a message with new raw content",
        "parameters": [
          {
            "name": "accountId",
            "type": "string",
            "description": "New message contents"
          },
          {
            "name": "path",
            "type": "string",
            "description": "New message contents"
          },
          {
            "name": "content",
            "type": "string",
            "description": "New message contents"
          },
          {
            "name": "markRead",
            "type": "boolean",
            "description": "whether the message will be marked read"
          }
        ]
      },
      {
        "name": "setHeader",
        "type": "function",
        "async": true,
        "description": "Add a custom header to a compose message",
        "parameters": [
          {
            "name": "tabId",
            "type": "integer",
            "description": "Compose window to modify"
          },
          {
            "name": "name",
            "type": "string",
            "description": "Name of the header to set"
          },
          {
            "name": "value",
            "type": "string",
            "description": "Value of custom header"
          }
        ]
      },
      {
        "name": "setCustomDBHeaders",
        "type": "function",
        "async": true,
        "description": "",
        "parameters": [
          {
            "name": "requestedHdrs",
            "type": "any"
          }
        ]
      },
      {
        "name": "findAssociatedDraft",
        "type": "function",
        "async": true,
        "description": "Find whether a composition window is editing an existing draft.",
        "parameters": [
          {
            "name": "windowId",
            "type": "integer",
            "optional": true,
            "description": ""
          }
        ]
      },
      {
        "name": "forceToolbarVisible",
        "type": "function",
        "async": true,
        "description": "Handle  when a new compose window is opened.",
        "parameters": [
          {
            "name": "windowId",
            "type": "integer",
            "optional": true,
            "description": "If unset, the function will run on all available windows. Otherwise just the most recent msgcompose window."
          }
        ]
      },
      {
        "name": "hijackComposeWindowKeyBindings",
        "type": "function",
        "async": true,
        "description": "Attach key bindings to compose windows.",
        "parameters": [
          {
            "name": "windowId",
            "type": "integer",
            "optional": true,
            "description": "If unset, the function will run on all available windows. Otherwise just the most recent msgcompose window."
          }
        ]
      }
    ],
    "events": [
      {
        "name": "onKeyCode",
        "type": "function",
        "description": "Fires from message compose windows on Alt+Shift+Enter",
        "parameters": []
      }
    ]
  }
]
